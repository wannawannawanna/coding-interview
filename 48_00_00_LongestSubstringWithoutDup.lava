//用0~25的相对位置，存储a~z字符
public class Solution{
    public int LongestSubStringWithoutDup(String str){
        int curLength = 0;
        int maxLength = 0;
        int[] position = new int[26];  //总共26个字符
        for(int i = 0; i < 26; i++){
            position[i] = -1;  //用-1表示这个字符串没有出现过
        }
        for(int i = 0; i < str.length(); i++){
            int prevIndex = position[str.charAt(i) - 'a'];
            if(prevIndex < 0 || i - prevIndex > curLength){   //表示当前字符没出现过或者当前出现跟上次出现的距离比f(i - 1)大，即算f(i - 1)的
            //时候，没有考虑str.charAt(i)这个字符
                curLength++;  //考虑当前出现的位置
            }else{
                curLength = i - prevIndex;  //表示当前出现跟上次出现的距离比f(i - 1)小，所以不考虑当前出现的位置，两次的距离即最长子字符串长度
            }
            position[str.charAt(i) - 'a'] = i;  //记录当前出现的位置
            if(curLength > maxLength){ 
                maxLength = curLength;
            }
        }
        
        return maxLength;
    }
    public static void main(String[] args) {
      example48 ex = new example48();
      String str = "arabcacfr";
      System.out.println(ex.LongestSubStringWithoutDup(str));
    }
}


//LeetCode上的解法，用双指针+HashMap，hashmap当添加进去的两个元素相等的时候后一个会覆盖掉前一个
class Solution {
    public int lengthOfLongestSubstring(String s) {
        Map<Character, Integer> dict = new HashMap<Character, Integer>();
        int i = -1, res = 0;
        for(int j = 0; j < s.length(); j++){
            if(dict.containsKey(s.charAt(j))){  //当有字符重复出现了，那么就要更新左边界，左边界是这个字符最后一次出现的位置和i当中比较大的那个
                i = Math.max(i, dict.get(s.charAt(j)));
            }
            dict.put(s.charAt(j), j);
            res = Math.max(res, j - i); //每次在res和j-i中取最大的
        }
        return res;
    }
}
